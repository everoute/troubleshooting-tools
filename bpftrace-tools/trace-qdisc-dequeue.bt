#!/usr/bin/env bpftrace

// Add required kernel headers
#include <linux/skbuff.h>
#include <linux/ip.h>
#include <linux/ptr_ring.h>
#include <linux/netdevice.h>
#include <linux/kernel.h>
#include <net/ip.h>
#include <net/sock.h>
#include <net/inet_sock.h>
#include <net/sch_generic.h>
#include <uapi/linux/vhost.h>
#include <uapi/asm-generic/ioctl.h>
//#include <drivers/vhost/vhost.h>

tracepoint:qdisc:qdisc_dequeue
{
    $skb = (struct sk_buff *) args->skbaddr;
    $skb_net_dev = $skb->dev;
    $dev_name = $skb->dev->name;

    $shinfo = (struct skb_shared_info *) ($skb->head + $skb->end);
    $gso_size = (uint32) $shinfo->gso_size;
    $gso_segs = (uint32) $shinfo->gso_segs;
    $gso_type = (uint32) $shinfo->gso_type;
    $nr_frags = (uint32) $shinfo->nr_frags;
    $skb_len = $skb->len;
    $data_len = $skb->data_len;

    if ( $dev_name == "vnet0" || $dev_name == "port-storage" ) 
    {
        if ($gso_type == 0 && $gso_size != 0) {
	    printf("###### qdisc_dequeue unexpected gso type:0x%02x, gso size: %-4u, skb_len: %d, data_len: %d\n", $gso_type, $gso_size, $skb_len, $data_len);
	    printf("netdev name: %s\n, kstack: %s", $dev_name, kstack);
            printf("end qdisc_dequeue \n\n\n\n\n");
        } else {
	    return
        }

    }
}

tracepoint:net:net_dev_queue
{
    $skb = (struct sk_buff *) args->skbaddr;
    $skb_net_dev = $skb->dev;
    $dev_name = $skb->dev->name;

    $shinfo = (struct skb_shared_info *) ($skb->head + $skb->end);
    $gso_size = (uint32) $shinfo->gso_size;
    $gso_segs = (uint32) $shinfo->gso_segs;
    $gso_type = (uint32) $shinfo->gso_type;
    $nr_frags = (uint32) $shinfo->nr_frags;
    $skb_len = $skb->len;
    $data_len = $skb->data_len;

    if ( $dev_name == "vnet0" || $dev_name == "port-storage" ) 
    {
        if ($gso_type == 0 && $gso_size != 0) {
	    printf("###### net_dev_queue unexpected gso type:0x%02x, gso size: %-4u, skb_len: %d, data_len: %d\n", $gso_type, $gso_size, $skb_len, $data_len);
	    printf("netdev name: %s\n, kstack: %s", $dev_name, kstack);
            printf("end net_dev_queue \n\n\n\n\n");
        } else {
	    return
        }
    }
}




//kprobe:__dev_queue_xmit,
kprobe:sch_direct_xmit,
//kprobe:htb_enqueue,
//kprobe:fq_codel_enqueue,
//kprobe:skb_copy_datagram_iter,
//kprobe:netem_enqueue,
//kprobe:tcf_classify,
//kprobe:tcf_action_exec,
//kprobe:cls_cgroup_classify
//kprobe:netdev_frame_hook
kprobe:tun_net_xmit
{
    $func = func;
    $skb = (struct sk_buff *) arg0;
    //$pskb = (struct sk_buff **) arg0;
    //$skb = *$pskb;
    $sock = $skb->sk;
    $skb_net_dev = $skb->dev;
    $dev_name = $skb->dev->name;
    $skb_netdev_features = $skb_net_dev->features;
    $ignore_df = $skb->ignore_df;

    $shinfo = (struct skb_shared_info *) ($skb->head + $skb->end);
    $gso_size = (uint32) $shinfo->gso_size;
    $gso_segs = (uint32) $shinfo->gso_segs;
    $gso_type = (uint32) $shinfo->gso_type;
    $nr_frags = (uint32) $shinfo->nr_frags;
    $dataref = (uint32) $shinfo->dataref.counter;

    $nh = (uint32) $skb->network_header;
    $th = (uint32) $skb->transport_header;
    $inh = (uint32) $skb->inner_network_header;
    $ith = (uint32) $skb->inner_transport_header;
    $inner_protocol = (($skb->inner_protocol & 0xff00) >> 8) | (($skb->inner_protocol & 0x00ff) << 8);
    $inner_protocol_type = $skb->inner_protocol_type;
    $encap = (uint32) $skb->encapsulation;
    $len = (uint32) $skb->len;
    $data_len = (uint32) $skb->data_len;

    $mac_header = (struct ethhdr *) $skb->data;
    $ip_header = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $ip_header->saddr);
    $dip = ntop(AF_INET, $ip_header->daddr);
    $ether_protocol = (($mac_header->h_proto & 0xff00) >> 8) | (($mac_header->h_proto & 0x00ff) << 8) ;

    $sk_common = $sock->__sk_common;
    $inet_sock_sip_be32 = $sk_common.skc_rcv_saddr;  
    $inet_sock_dip_be32 = $sk_common.skc_daddr;  
    $inet_sock_sip = ntop(AF_INET, $inet_sock_sip_be32);
    $inet_sock_dip = ntop(AF_INET, $inet_sock_dip_be32);
    $inet_sock_dport = $sk_common.skc_dport;


    //if ($dev_name == "eth0" || $dev_name == "vnet0") 
    //if ($dev_name == "vnet0" ) 
    //if ( $dev_name == "vnet0" || $dev_name == "port-storage" || $dev_name == "eth0" ) 
    //{
        $frag_list = $shinfo->frag_list;
        $ip_summed = $skb->ip_summed;
        $cb = (struct inet_skb_parm *) $skb->cb;
        $netdev_features = $skb_net_dev->features;
        $netdev_hw_features = $skb_net_dev->hw_features;
        $netdev_wanted_features = $skb_net_dev->wanted_features;
        $netdev_hwenc_features = $skb_net_dev->hw_enc_features;
        $netdev_gso_partial_features = $skb_net_dev->gso_partial_features;

        if ($gso_type == 0 && $gso_size != 0) {
            printf("%s probe\n", $func);
	    printf("###### inet socket info : saddr: %s, daddr: %s, dport: %d \n", $inet_sock_sip, $inet_sock_dip, $inet_sock_dport);
	    printf("###### %s unexpected gso type:0x%02x, gso size: %-4u, data len: %d, dataref: %d\n", $func, $gso_type, $gso_size, $data_len, $dataref);
            printf("####### dev_name: %s\t, skb dev features: %llx\t, ignore df: %d\t skb_len: %u,\t skb_cloned: %d,\t network_header: %u,\t transport_header: %u,\t encap: %-3u,\t inner_network_header: %u,\t inner_transport_header: %u,\t | gso_size: %-4u,\t gso_segs: %-4u,\t gso_type: 0x%02x,\t nr_frags: %u\t, func: %s\n", $dev_name, $skb_net_dev->features, $ignore_df, $len, $skb->cloned, $nh, $th, $encap, $inh, $ith, $gso_size, $gso_segs, $gso_type, $nr_frags, $func);
            //printf("####### dev hardware features, netdev_features: %llx\t hw_features: %llx\t wanted_features: %llx\t hwenc_features: %llx\t gso_partial_features: %llx\n", $netdev_features, $netdev_hw_features, $netdev_wanted_features, $netdev_hwenc_features, $netdev_gso_partial_features);
        } else {
	    return;
        }

        if ($ip_header->protocol == IPPROTO_UDP)
        {
          printf("####### frag_list: %d,  ip_summed: %llx\n", $frag_list, $ip_summed);
          printf("####### skb cb frag_max_size: %d\n", $cb->frag_max_size);

          //$udp_header = (struct udphdr *) $transport_header_offset;
          $udp_header = (struct udphdr *)($skb->head + $skb->transport_header);
          $up_src = (($udp_header->source & 0xff00) >> 8) | (($udp_header->source & 0x00ff) << 8);
          $up_dst = (($udp_header->dest & 0xff00) >> 8) | (($udp_header->dest & 0x00ff) << 8);

          // Print the collected data
          printf("####### udp header info: %s:%d => %s:%d\n", $sip, $up_src, $dip, $up_dst);
          printf("####### MAC src: %02x:%02x:%02x:%02x:%02x:%02x, MAC dst: %02x:%02x:%02x:%02x:%02x:%02x\n",
             $mac_header->h_source[0], $mac_header->h_source[1], $mac_header->h_source[2],
             $mac_header->h_source[3], $mac_header->h_source[4], $mac_header->h_source[5],
             $mac_header->h_dest[0], $mac_header->h_dest[1], $mac_header->h_dest[2],
             $mac_header->h_dest[3], $mac_header->h_dest[4], $mac_header->h_dest[5]);
        }

        if ($ip_header->protocol == IPPROTO_TCP)
        {
          printf("####### frag_list: %d,  ip_summed: %llx\n", $frag_list, $ip_summed);
          printf("####### skb cb frag_max_size: %d\n", $cb->frag_max_size);

          $tcp_header = (struct tcphdr *)($skb->head + $skb->transport_header);
          $tp_src = (($tcp_header->source & 0xff00) >> 8) | (($tcp_header->source & 0x00ff) << 8);
          $tp_dst = (($tcp_header->dest & 0xff00) >> 8) | (($tcp_header->dest & 0x00ff) << 8);

          // Print the collected data
          printf("####### tcp header info data: %s:%d => %s:%d\n", $sip, $tp_src, $dip, $tp_dst);
          printf("####### MAC src: %02x:%02x:%02x:%02x:%02x:%02x, MAC dst: %02x:%02x:%02x:%02x:%02x:%02x\n",
             $mac_header->h_source[0], $mac_header->h_source[1], $mac_header->h_source[2],
             $mac_header->h_source[3], $mac_header->h_source[4], $mac_header->h_source[5],
             $mac_header->h_dest[0], $mac_header->h_dest[1], $mac_header->h_dest[2],
             $mac_header->h_dest[3], $mac_header->h_dest[4], $mac_header->h_dest[5]);
        }

        printf("netdev name: %s\n, kstack: %s", $dev_name, kstack);
        printf("end %s probe\n\n\n\n\n", $func);
  //}
}

//kprobe:queue_gso_packets,
//kprobe:queue_userspace_packet,
//kprobe:tcp_v4_rcv,
kprobe:__ip_queue_xmit,
kprobe:__tcp_transmit_skb,
kprobe:tcp_add_backlog,
//kprobe:skb_try_coalesce,
kprobe:tcp_v4_do_rcv
//kprobe:tcp_rcv_established,
//kprobe:tcp_data_queue
{
    $func = func;
    $sock = (struct sock *) arg0;
    $skb = (struct sk_buff *) arg1;
    $skb_net_dev = $skb->dev;
    $dev_name = $skb->dev->name;
    $skb_netdev_features = $skb_net_dev->features;
    $ignore_df = $skb->ignore_df;

    $shinfo = (struct skb_shared_info *) ($skb->head + $skb->end);
    $gso_size = (uint32) $shinfo->gso_size;
    $gso_segs = (uint32) $shinfo->gso_segs;
    $gso_type = (uint32) $shinfo->gso_type;
    $nr_frags = (uint32) $shinfo->nr_frags;
    $dataref = (uint32) $shinfo->dataref.counter;

    $nh = (uint32) $skb->network_header;
    $th = (uint32) $skb->transport_header;
    $inh = (uint32) $skb->inner_network_header;
    $ith = (uint32) $skb->inner_transport_header;
    $inner_protocol = (($skb->inner_protocol & 0xff00) >> 8) | (($skb->inner_protocol & 0x00ff) << 8);
    $inner_protocol_type = $skb->inner_protocol_type;
    $encap = (uint32) $skb->encapsulation;
    $len = (uint32) $skb->len;
    $data_len = (uint32) $skb->data_len;

    $mac_header = (struct ethhdr *) $skb->data;
    $ip_header = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $ip_header->saddr);
    $dip = ntop(AF_INET, $ip_header->daddr);
    $ether_protocol = (($mac_header->h_proto & 0xff00) >> 8) | (($mac_header->h_proto & 0x00ff) << 8);

    $sk_common = $sock->__sk_common;
    $inet_sock_sip_be32 = $sk_common.skc_rcv_saddr;  
    $inet_sock_dip_be32 = $sk_common.skc_daddr;  
    $inet_sock_sip = ntop(AF_INET, $inet_sock_sip_be32);
    $inet_sock_dip = ntop(AF_INET, $inet_sock_dip_be32);
    $inet_sock_dport = $sk_common.skc_dport;


    //if ($dev_name == "eth0" || $dev_name == "vnet0") 
    //if ($dev_name == "vnet0" ) 
    //if ( $dev_name == "vnet0" || $dev_name == "port-storage" ) 
    //{
        $frag_list = $shinfo->frag_list;
        $ip_summed = $skb->ip_summed;
        $cb = (struct inet_skb_parm *) $skb->cb;
        $netdev_features = $skb_net_dev->features;
        $netdev_hw_features = $skb_net_dev->hw_features;
        $netdev_wanted_features = $skb_net_dev->wanted_features;
        $netdev_hwenc_features = $skb_net_dev->hw_enc_features;
        $netdev_gso_partial_features = $skb_net_dev->gso_partial_features;

        if ($gso_type == 0 && $gso_size != 0) {
            printf("%s probe\n", $func);
	    printf("###### inet socket info : saddr: %s, daddr: %s, dport: %d \n", $inet_sock_sip, $inet_sock_dip, $inet_sock_dport);
	    printf("###### %s unexpected gso type:0x%02x, gso size: %-4u, data len: %d, dataref: %d\n", $func, $gso_type, $gso_size, $data_len, $dataref);
            //printf("####### dev_name: %s\t, skb dev features: %llx\t, ignore df: %d\t skb_len: %u,\t network_header: %u,\t transport_header: %u,\t encap: %-3u,\t inner_network_header: %u,\t inner_transport_header: %u,\t | gso_size: %-4u,\t gso_segs: %-4u,\t gso_type: 0x%02x,\t nr_frags: %u\t, func: %s\n", $dev_name, $skb_net_dev->features, $ignore_df, $len, $nh, $th, $encap, $inh, $ith, $gso_size, $gso_segs, $gso_type, $nr_frags, $func);
            printf("####### dev_name: %s\t, skb dev features: %llx\t, ignore df: %d\t skb_len: %u,\t skb_cloned: %d,\t network_header: %u,\t transport_header: %u,\t encap: %-3u,\t inner_network_header: %u,\t inner_transport_header: %u,\t | gso_size: %-4u,\t gso_segs: %-4u,\t gso_type: 0x%02x,\t nr_frags: %u\t, func: %s\n", $dev_name, $skb_net_dev->features, $ignore_df, $len, $skb->cloned, $nh, $th, $encap, $inh, $ith, $gso_size, $gso_segs, $gso_type, $nr_frags, $func);
            printf("####### dev hardware features, netdev_features: %llx\t hw_features: %llx\t wanted_features: %llx\t hwenc_features: %llx\t gso_partial_features: %llx\n", $netdev_features, $netdev_hw_features, $netdev_wanted_features, $netdev_hwenc_features, $netdev_gso_partial_features);
        } else {
	    return;
        }

        if ($ip_header->protocol == IPPROTO_UDP)
        {
          printf("####### frag_list: %d,  ip_summed: %llx\n", $frag_list, $ip_summed);
          printf("####### skb cb frag_max_size: %d\n", $cb->frag_max_size);

          //$udp_header = (struct udphdr *) $transport_header_offset;
          $udp_header = (struct udphdr *)($skb->head + $skb->transport_header);
          $up_src = (($udp_header->source & 0xff00) >> 8) | (($udp_header->source & 0x00ff) << 8);
          $up_dst = (($udp_header->dest & 0xff00) >> 8) | (($udp_header->dest & 0x00ff) << 8);

          // Print the collected data
          printf("####### udp header info: %s:%d => %s:%d\n", $sip, $up_src, $dip, $up_dst);
          printf("####### MAC src: %02x:%02x:%02x:%02x:%02x:%02x, MAC dst: %02x:%02x:%02x:%02x:%02x:%02x\n",
             $mac_header->h_source[0], $mac_header->h_source[1], $mac_header->h_source[2],
             $mac_header->h_source[3], $mac_header->h_source[4], $mac_header->h_source[5],
             $mac_header->h_dest[0], $mac_header->h_dest[1], $mac_header->h_dest[2],
             $mac_header->h_dest[3], $mac_header->h_dest[4], $mac_header->h_dest[5]);
        }

        if ($ip_header->protocol == IPPROTO_TCP)
        {
          printf("####### frag_list: %d,  ip_summed: %llx\n", $frag_list, $ip_summed);
          printf("####### skb cb frag_max_size: %d\n", $cb->frag_max_size);

          $tcp_header = (struct tcphdr *)($skb->head + $skb->transport_header);
          $tp_src = (($tcp_header->source & 0xff00) >> 8) | (($tcp_header->source & 0x00ff) << 8);
          $tp_dst = (($tcp_header->dest & 0xff00) >> 8) | (($tcp_header->dest & 0x00ff) << 8);

          // Print the collected data
          printf("####### tcp header info data: %s:%d => %s:%d\n", $sip, $tp_src, $dip, $tp_dst);
          printf("####### MAC src: %02x:%02x:%02x:%02x:%02x:%02x, MAC dst: %02x:%02x:%02x:%02x:%02x:%02x\n",
             $mac_header->h_source[0], $mac_header->h_source[1], $mac_header->h_source[2],
             $mac_header->h_source[3], $mac_header->h_source[4], $mac_header->h_source[5],
             $mac_header->h_dest[0], $mac_header->h_dest[1], $mac_header->h_dest[2],
             $mac_header->h_dest[3], $mac_header->h_dest[4], $mac_header->h_dest[5]);
        }

        printf("netdev name: %s\n, kstack: %s", $dev_name, kstack);
        printf("end %s probe\n\n\n\n\n", $func);
    //}
}

//kprobe:tcp_v4_fill_cb,
//kprobe:skb_try_coalesce,
//kprobe:kfree_skb_partial
//{
//    $func = func;
//    $skb = (struct sk_buff *) arg0;
//    $skb_net_dev = $skb->dev;
//    $dev_name = $skb->dev->name;
//    $skb_netdev_features = $skb_net_dev->features;
//    $ignore_df = $skb->ignore_df;
//
//    $shinfo = (struct skb_shared_info *) ($skb->head + $skb->end);
//    $gso_size = (uint32) $shinfo->gso_size;
//    $gso_segs = (uint32) $shinfo->gso_segs;
//    $gso_type = (uint32) $shinfo->gso_type;
//    $nr_frags = (uint32) $shinfo->nr_frags;
//    $dataref = (uint32) $shinfo->dataref.counter;
//
//    $nh = (uint32) $skb->network_header;
//    $th = (uint32) $skb->transport_header;
//    $inh = (uint32) $skb->inner_network_header;
//    $ith = (uint32) $skb->inner_transport_header;
//    $inner_protocol = (($skb->inner_protocol & 0xff00) >> 8) | (($skb->inner_protocol & 0x00ff) << 8);
//    $inner_protocol_type = $skb->inner_protocol_type;
//    $encap = (uint32) $skb->encapsulation;
//    $len = (uint32) $skb->len;
//    $data_len = (uint32) $skb->data_len;
//
//    $mac_header = (struct ethhdr *) $skb->data;
//    $ip_header = (struct iphdr *)($skb->head + $skb->network_header);
//    $sip = ntop(AF_INET, $ip_header->saddr);
//    $dip = ntop(AF_INET, $ip_header->daddr);
//    $ether_protocol = (($mac_header->h_proto & 0xff00) >> 8) | (($mac_header->h_proto & 0x00ff) << 8) ;
//
//    //if ($dev_name == "eth0" || $dev_name == "vnet0") 
//    //if ($dev_name == "vnet0" ) 
//    //if ( $dev_name == "vnet0" || $dev_name == "port-storage" ) 
//    //{
//        $frag_list = $shinfo->frag_list;
//        $ip_summed = $skb->ip_summed;
//        $cb = (struct inet_skb_parm *) $skb->cb;
//        $netdev_features = $skb_net_dev->features;
//        $netdev_hw_features = $skb_net_dev->hw_features;
//        $netdev_wanted_features = $skb_net_dev->wanted_features;
//        $netdev_hwenc_features = $skb_net_dev->hw_enc_features;
//        $netdev_gso_partial_features = $skb_net_dev->gso_partial_features;
//
//        if ($gso_type == 0 && $gso_size != 0) {
//            printf("%s probe\n", $func);
//	    printf("###### %s unexpected gso type:0x%02x, gso size: %-4u, data len: %d, dataref: %d\n", $func, $gso_type, $gso_size, $data_len, $dataref);
//            printf("####### skb info, dev_name: %s\t, skb dev features: %llx\t, ignore df: %d\t skb_len: %u,\t network_header: %u,\t transport_header: %u,\t encap: %-3u,\t inner_network_header: %u,\t inner_transport_header: %u,\t | gso_size: %-4u,\t gso_segs: %-4u,\t gso_type: 0x%02x,\t nr_frags: %u\t, func: %s\n", $dev_name, $skb_net_dev->features, $ignore_df, $len, $nh, $th, $encap, $inh, $ith, $gso_size, $gso_segs, $gso_type, $nr_frags, $func);
//            printf("####### dev hardware features, netdev_features: %llx\t hw_features: %llx\t wanted_features: %llx\t hwenc_features: %llx\t gso_partial_features: %llx\n", $netdev_features, $netdev_hw_features, $netdev_wanted_features, $netdev_hwenc_features, $netdev_gso_partial_features);
//        } else {
//	    return;
//        }
//
//        if ($ip_header->protocol == IPPROTO_UDP)
//        {
//          printf("####### frag_list: %d,  ip_summed: %llx\n", $frag_list, $ip_summed);
//          printf("####### skb cb frag_max_size: %d\n", $cb->frag_max_size);
//
//          //$udp_header = (struct udphdr *) $transport_header_offset;
//          $udp_header = (struct udphdr *)($skb->head + $skb->transport_header);
//          $up_src = (($udp_header->source & 0xff00) >> 8) | (($udp_header->source & 0x00ff) << 8);
//          $up_dst = (($udp_header->dest & 0xff00) >> 8) | (($udp_header->dest & 0x00ff) << 8);
//
//          // Print the collected data
//          printf("####### udp header info: %s:%d => %s:%d\n", $sip, $up_src, $dip, $up_dst);
//          printf("####### MAC src: %02x:%02x:%02x:%02x:%02x:%02x, MAC dst: %02x:%02x:%02x:%02x:%02x:%02x\n",
//             $mac_header->h_source[0], $mac_header->h_source[1], $mac_header->h_source[2],
//             $mac_header->h_source[3], $mac_header->h_source[4], $mac_header->h_source[5],
//             $mac_header->h_dest[0], $mac_header->h_dest[1], $mac_header->h_dest[2],
//             $mac_header->h_dest[3], $mac_header->h_dest[4], $mac_header->h_dest[5]);
//        }
//
//        if ($ip_header->protocol == IPPROTO_TCP)
//        {
//          printf("####### frag_list: %d,  ip_summed: %llx\n", $frag_list, $ip_summed);
//          printf("####### skb cb frag_max_size: %d\n", $cb->frag_max_size);
//
//          $tcp_header = (struct tcphdr *)($skb->head + $skb->transport_header);
//          $tp_src = (($tcp_header->source & 0xff00) >> 8) | (($tcp_header->source & 0x00ff) << 8);
//          $tp_dst = (($tcp_header->dest & 0xff00) >> 8) | (($tcp_header->dest & 0x00ff) << 8);
//
//          // Print the collected data
//          printf("####### tcp header info data: %s:%d => %s:%d\n", $sip, $tp_src, $dip, $tp_dst);
//          printf("####### MAC src: %02x:%02x:%02x:%02x:%02x:%02x, MAC dst: %02x:%02x:%02x:%02x:%02x:%02x\n",
//             $mac_header->h_source[0], $mac_header->h_source[1], $mac_header->h_source[2],
//             $mac_header->h_source[3], $mac_header->h_source[4], $mac_header->h_source[5],
//             $mac_header->h_dest[0], $mac_header->h_dest[1], $mac_header->h_dest[2],
//             $mac_header->h_dest[3], $mac_header->h_dest[4], $mac_header->h_dest[5]);
//        }
//
//        printf("netdev name: %s\n, kstack: %s", $dev_name, kstack);
//        printf("end %s probe\n\n\n\n\n", $func);
//    //}
//}
