#!/usr/bin/env bpftrace

// Add required kernel headers
#include <linux/skbuff.h>
#include <linux/ip.h>
#include <linux/ptr_ring.h>
#include <linux/netdevice.h>
#include <linux/kernel.h>
#include <net/ip.h>
#include <net/sch_generic.h>
#include <uapi/linux/vhost.h>
#include <uapi/asm-generic/ioctl.h>
//#include <drivers/vhost/vhost.h>


struct tun_struct {
	struct tun_file __rcu	*tfiles[256];
	unsigned int            numqueues;
	unsigned int 		flags;
	kuid_t			owner;
	kgid_t			group;

	struct net_device	*dev;
	netdev_features_t	set_features;

	int			align;
	int			vnet_hdr_sz;
	int			sndbuf;
	struct sock_fprog	fprog;
	bool			filter_attached;
	int debug;
	spinlock_t lock;
	struct timer_list flow_gc_timer;
	unsigned long ageing_time;
	unsigned int numdisabled;
	struct list_head disabled;
	void *security;
	u32 flow_count;
	u32 rx_batched;
	struct tun_pcpu_stats __percpu *pcpu_stats;
	struct bpf_prog __rcu *xdp_prog;
	struct tun_prog __rcu *steering_prog;
	struct tun_prog __rcu *filter_prog;
}

struct tun_file {
	struct sock sk;
	long: 64;
	long: 64;
	long: 64;
	long: 64;
	struct socket socket;
	struct tun_struct *tun;
	struct fasync_struct *fasync;
	unsigned int flags;
	union {
		u16 queue_index;
		unsigned int ifindex;
	};
	struct napi_struct napi;
	bool napi_enabled;
	bool napi_frags_enabled;
	struct mutex napi_mutex;
	struct list_head next;
	struct tun_struct *detached;
	long: 64;
	long: 64;
	long: 64;
	struct ptr_ring tx_ring;
	struct xdp_rxq_info xdp_rxq;
};

/* The virtqueue structure describes a queue attached to a device. */
struct vhost_virtqueue {
	//struct vhost_dev *dev;

	/* The actual ring of buffers. */
	struct mutex mutex;
	unsigned int num;
	struct vring_desc __user *desc;
	struct vring_avail __user *avail;
	struct vring_used __user *used;
	struct file *kick;
	struct eventfd_ctx *call_ctx;
	struct eventfd_ctx *error_ctx;
	struct eventfd_ctx *log_ctx;


	/* The routine to call when the Guest pings us, or timeout. */

	/* Last available index we saw. */
	u16 last_avail_idx;

	/* Caches available index value from user. */
	u16 avail_idx;

	/* Last index we used. */
	u16 last_used_idx;

	/* Used flags */
	u16 used_flags;

	/* Last used index value we have signalled on */
	u16 signalled_used;

	/* Last used index value we have signalled on */
	bool signalled_used_valid;

	/* Log writes to used structure. */
	bool log_used;
	u64 log_addr;

	struct iovec iotlb_iov[64];
	struct iovec *indirect;
	struct vring_used_elem *heads;
	/* Protected by virtqueue mutex. */
	struct vhost_umem *umem;
	struct vhost_umem *iotlb;
	void *private_data;
	u64 acked_features;
	u64 acked_backend_features;
	/* Log write descriptors */
	void __user *log_base;
	struct vhost_log *log;

	/* Ring endianness. Defaults to legacy native endianness.
	 * Set to true when starting a modern virtio device. */
	bool is_le;
	/* Ring endianness requested by userspace for cross-endian support. */
	bool user_be;
	u32 busyloop_timeout;
};

struct vhost_net_virtqueue {
	struct vhost_virtqueue vq;
	size_t vhost_hlen;
	size_t sock_hlen;
	/* vhost zerocopy support fields below: */
	/* last used idx for outstanding DMA zerocopy buffers */
	int upend_idx;
	/* For TX, first used idx for DMA done zerocopy buffers
	 * For RX, number of batched heads
	 */
	int done_idx;
	/* an array of userspace buffers info */
	struct ubuf_info *ubuf_info;
	/* Reference counting for outstanding ubufs.
	 * Protected by vq mutex. Writers must also take device mutex. */
	struct vhost_net_ubuf_ref *ubufs;
	struct ptr_ring *rx_ring;
};



struct vhost_net {
//	struct vhost_dev dev;
	struct vhost_net_virtqueue vqs[2];
	/* Number of TX recently submitted.
	 * Protected by tx vq lock. */
	unsigned tx_packets;
	/* Number of times zerocopy TX recently failed.
	 * Protected by tx vq lock. */
	unsigned tx_zcopy_err;
	/* Flush in progress. Protected by tx vq lock. */
	bool tx_flush;
};


//kprobe:__dev_queue_xmit,
kprobe:sch_direct_xmit,
kprobe:htb_enqueue,
kprobe:fq_codel_enqueue,
kprobe:tcf_classify,
kprobe:tcf_action_exec,
kprobe:cls_cgroup_classify
{
    $func = func;
    $skb = (struct sk_buff *) arg0;
    $skb_net_dev = $skb->dev;
    $dev_name = $skb->dev->name;
    $skb_netdev_features = $skb_net_dev->features;
    $ignore_df = $skb->ignore_df;

    $shinfo = (struct skb_shared_info *) ($skb->head + $skb->end);
    $gso_size = (uint32) $shinfo->gso_size;
    $gso_segs = (uint32) $shinfo->gso_segs;
    $gso_type = (uint32) $shinfo->gso_type;
    $nr_frags = (uint32) $shinfo->nr_frags;

    $nh = (uint32) $skb->network_header;
    $th = (uint32) $skb->transport_header;
    $inh = (uint32) $skb->inner_network_header;
    $ith = (uint32) $skb->inner_transport_header;
    $inner_protocol = (($skb->inner_protocol & 0xff00) >> 8) | (($skb->inner_protocol & 0x00ff) << 8);
    $inner_protocol_type = $skb->inner_protocol_type;
    $encap = (uint32) $skb->encapsulation;
    $len = (uint32) $skb->len;

    $mac_header = (struct ethhdr *) $skb->data;
    $ip_header = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $ip_header->saddr);
    $dip = ntop(AF_INET, $ip_header->daddr);
    $ether_protocol = (($mac_header->h_proto & 0xff00) >> 8) | (($mac_header->h_proto & 0x00ff) << 8) ;
    //if ($ether_protocol != 0x0800) {
    //    //printf("ether protocol: %llx\n", $ether_protocol);
    //    return
    //}
    //$addr = pton(AF_INET, "0.0.0.0");
    //if (strcmp(str("0.0.0.0"), str($addr), 4) == 0) {
    //    printf("src addr 0.0.0.0\n")
    //    return
    //}
    if ($ip_header->protocol == IPPROTO_UDP)
    {
      //$udp_header = (struct udphdr *) $transport_header_offset;
      $udp_header = (struct udphdr *)($skb->head + $skb->transport_header);
      $up_src = (($udp_header->source & 0xff00) >> 8) | (($udp_header->source & 0x00ff) << 8);
      $up_dst = (($udp_header->dest & 0xff00) >> 8) | (($udp_header->dest & 0x00ff) << 8);
      if ($up_src == 67 || $up_src == 68) {
          return
      }
    }

    //if ($dev_name == "eth0" || $dev_name == "vnet13") 
    //if ($dev_name == "vnet13" ) 
    if ( $dev_name == "vnet0" || $dev_name == "port-storage" ) 
    {
        $frag_list = $shinfo->frag_list;
        $ip_summed = $skb->ip_summed;
        $cb = (struct inet_skb_parm *) $skb->cb;
        $netdev_features = $skb_net_dev->features;
        $netdev_hw_features = $skb_net_dev->hw_features;
        $netdev_wanted_features = $skb_net_dev->wanted_features;
        $netdev_hwenc_features = $skb_net_dev->hw_enc_features;
        $netdev_gso_partial_features = $skb_net_dev->gso_partial_features;

        if ($gso_type == 0 && $gso_size != 0) {
	    printf("###### %s unexpected gso type:0x%02x, gso size: %-4u\n", $func, $gso_type, $gso_size);
            printf("####### skb info, dev_name: %-4s\t, skb dev features: %llx\t, ignore df: %d\t skb_len: %u,\t network_header: %u,\t transport_header: %u,\t encap: %-3u,\t inner_network_header: %u,\t inner_transport_header: %u,\t | gso_size: %-4u,\t gso_segs: %-4u,\t gso_type: 0x%02x,\t nr_frags: %u\t, func: %s\n", $dev_name, $skb_net_dev->features, $ignore_df, $len, $nh, $th, $encap, $inh, $ith, $gso_size, $gso_segs, $gso_type, $nr_frags, $func);
	    printf("netdev name: %s\n, kstack: %s", $dev_name, kstack);
            //printf("end %s probe\n\n\n\n\n", $func);
        } else {
	    return
        }
        printf("%s probe\n", $func);

        if ($ip_header->protocol == IPPROTO_UDP)
        {
          printf("####### frag_list: %d,  ip_summed: %llx\n", $frag_list, $ip_summed);
          printf("####### skb cb frag_max_size: %d\n", $cb->frag_max_size);

          printf("####### skb info, dev_name: %-4s\t, skb dev features: %llx\t, ignore df: %d\t skb_len: %u,\t network_header: %u,\t transport_header: %u,\t encap: %-3u,\t inner_network_header: %u,\t inner_transport_header: %u,\t | gso_size: %-4u,\t gso_segs: %-4u,\t gso_type: 0x%02x,\t nr_frags: %u\t, func: %s\n", $dev_name, $skb_net_dev->features, $ignore_df, $len, $nh, $th, $encap, $inh, $ith, $gso_size, $gso_segs, $gso_type, $nr_frags, $func);
          printf("####### dev hardware features, netdev_features: %llx\t hw_features: %llx\t wanted_features: %llx\t hwenc_features: %llx\t gso_partial_features: %llx\n", $netdev_features, $netdev_hw_features, $netdev_wanted_features, $netdev_hwenc_features, $netdev_gso_partial_features);
          //$udp_header = (struct udphdr *) $transport_header_offset;
          $udp_header = (struct udphdr *)($skb->head + $skb->transport_header);
          $up_src = (($udp_header->source & 0xff00) >> 8) | (($udp_header->source & 0x00ff) << 8);
          $up_dst = (($udp_header->dest & 0xff00) >> 8) | (($udp_header->dest & 0x00ff) << 8);

          // Print the collected data
          printf("####### udp header info: %s:%d => %s:%d\n", $sip, $up_src, $dip, $up_dst);
          printf("####### MAC src: %02x:%02x:%02x:%02x:%02x:%02x, MAC dst: %02x:%02x:%02x:%02x:%02x:%02x\n",
             $mac_header->h_source[0], $mac_header->h_source[1], $mac_header->h_source[2],
             $mac_header->h_source[3], $mac_header->h_source[4], $mac_header->h_source[5],
             $mac_header->h_dest[0], $mac_header->h_dest[1], $mac_header->h_dest[2],
             $mac_header->h_dest[3], $mac_header->h_dest[4], $mac_header->h_dest[5]);
        }

        if ($ip_header->protocol == IPPROTO_TCP)
        {
          printf("####### frag_list: %d,  ip_summed: %llx\n", $frag_list, $ip_summed);
          printf("####### skb cb frag_max_size: %d\n", $cb->frag_max_size);

          printf("####### skb info, dev_name: %-4s\t, skb dev features: %llx\t, ignore df: %d\t skb_len: %u,\t network_header: %u,\t transport_header: %u,\t encap: %-3u,\t inner_network_header: %u,\t inner_transport_header: %u,\t | gso_size: %-4u,\t gso_segs: %-4u,\t gso_type: 0x%02x,\t nr_frags: %u\t, func: %s\n", $dev_name, $skb_net_dev->features, $ignore_df, $len, $nh, $th, $encap, $inh, $ith, $gso_size, $gso_segs, $gso_type, $nr_frags, $func);
          printf("####### dev hardware features, netdev_features: %llx\t hw_features: %llx\t wanted_features: %llx\t hwenc_features: %llx\t gso_partial_features: %llx\n", $netdev_features, $netdev_hw_features, $netdev_wanted_features, $netdev_hwenc_features, $netdev_gso_partial_features);
          $tcp_header = (struct tcphdr *)($skb->head + $skb->transport_header);
          $tp_src = (($tcp_header->source & 0xff00) >> 8) | (($tcp_header->source & 0x00ff) << 8);
          $tp_dst = (($tcp_header->dest & 0xff00) >> 8) | (($tcp_header->dest & 0x00ff) << 8);

          // Print the collected data
          printf("####### tcp header info data: %s:%d => %s:%d\n", $sip, $tp_src, $dip, $tp_dst);
          printf("####### MAC src: %02x:%02x:%02x:%02x:%02x:%02x, MAC dst: %02x:%02x:%02x:%02x:%02x:%02x\n",
             $mac_header->h_source[0], $mac_header->h_source[1], $mac_header->h_source[2],
             $mac_header->h_source[3], $mac_header->h_source[4], $mac_header->h_source[5],
             $mac_header->h_dest[0], $mac_header->h_dest[1], $mac_header->h_dest[2],
             $mac_header->h_dest[3], $mac_header->h_dest[4], $mac_header->h_dest[5]);
        }

        printf("netdev name: %s\n, kstack: %s", $dev_name, kstack);
        printf("end %s probe\n\n\n\n\n", $func);
    }
}

kprobe:fq_codel_enqueue
{
    $func = func;
    $skb = (struct sk_buff *) arg0;
    $qdisc = (struct Qdisc *) arg1;
    $enqueue = $qdisc->enqueue;
    $skb_net_dev = $skb->dev;
    $dev_name = $skb->dev->name;
    $skb_netdev_features = $skb_net_dev->features;
    $ignore_df = $skb->ignore_df;

    $shinfo = (struct skb_shared_info *) ($skb->head + $skb->end);
    $gso_size = (uint32) $shinfo->gso_size;
    $gso_segs = (uint32) $shinfo->gso_segs;
    $gso_type = (uint32) $shinfo->gso_type;
    $nr_frags = (uint32) $shinfo->nr_frags;

    $nh = (uint32) $skb->network_header;
    $th = (uint32) $skb->transport_header;
    $inh = (uint32) $skb->inner_network_header;
    $ith = (uint32) $skb->inner_transport_header;
    $inner_protocol = (($skb->inner_protocol & 0xff00) >> 8) | (($skb->inner_protocol & 0x00ff) << 8);
    $inner_protocol_type = $skb->inner_protocol_type;
    $encap = (uint32) $skb->encapsulation;
    $len = (uint32) $skb->len;

    $mac_header = (struct ethhdr *) $skb->data;
    $ip_header = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $ip_header->saddr);
    $dip = ntop(AF_INET, $ip_header->daddr);
    $ether_protocol = (($mac_header->h_proto & 0xff00) >> 8) | (($mac_header->h_proto & 0x00ff) << 8) ;
    //if ($ether_protocol != 0x0800) {
    //    //printf("ether protocol: %llx\n", $ether_protocol);
    //    return
    //}
    //$addr = pton(AF_INET, "0.0.0.0");
    //if (strcmp(str("0.0.0.0"), str($addr), 4) == 0) {
    //    printf("src addr 0.0.0.0\n")
    //    return
    //}
    if ($ip_header->protocol == IPPROTO_UDP)
    {
      //$udp_header = (struct udphdr *) $transport_header_offset;
      $udp_header = (struct udphdr *)($skb->head + $skb->transport_header);
      $up_src = (($udp_header->source & 0xff00) >> 8) | (($udp_header->source & 0x00ff) << 8);
      $up_dst = (($udp_header->dest & 0xff00) >> 8) | (($udp_header->dest & 0x00ff) << 8);
      if ($up_src == 67 || $up_src == 68) {
          return
      }
    }
    if ( $enqueue == 0 ) 
    {
	return;
    }

    //if ($dev_name == "eth0" || $dev_name == "vnet13") 
    //if ($dev_name == "vnet13" ) 
    if ( $dev_name == "0" || $dev_name == "port-storage" ) 
    {
        $frag_list = $shinfo->frag_list;
        $ip_summed = $skb->ip_summed;
        $cb = (struct inet_skb_parm *) $skb->cb;
        $netdev_features = $skb_net_dev->features;
        $netdev_hw_features = $skb_net_dev->hw_features;
        $netdev_wanted_features = $skb_net_dev->wanted_features;
        $netdev_hwenc_features = $skb_net_dev->hw_enc_features;
        $netdev_gso_partial_features = $skb_net_dev->gso_partial_features;

        if ($gso_type == 0 && $gso_size != 0) {
	    printf("###### %s unexpected gso type:0x%02x, gso size: %-4u\n", $func, $gso_type, $gso_size);
            //printf("####### skb info, dev_name: %-4s\t, skb dev features: %llx\t, ignore df: %d\t skb_len: %u,\t network_header: %u,\t transport_header: %u,\t encap: %-3u,\t inner_network_header: %u,\t inner_transport_header: %u,\t | gso_size: %-4u,\t gso_segs: %-4u,\t gso_type: 0x%02x,\t nr_frags: %u\t, frag_list: %d,  ip_summed: %llx, skb cb frag_max_size: %d, func: %s\n", $dev_name, $skb_net_dev->features, $ignore_df, $len, $nh, $th, $encap, $inh, $ith, $gso_size, $gso_segs, $gso_type, $nr_frags, $frag_list, $ip_summed, $cb->frag_max_size, $func);
	    printf("netdev name: %s\n, kstack: %s", $dev_name, kstack);
        } else {
	    return
        }
        printf("%s probe\n", $func);

        printf("####### dev hardware features, netdev_features: %llx\t hw_features: %llx\t wanted_features: %llx\t hwenc_features: %llx\t gso_partial_features: %llx\n", $netdev_features, $netdev_hw_features, $netdev_wanted_features, $netdev_hwenc_features, $netdev_gso_partial_features);
        printf("####### skb info, dev_name: %-4s\t, ignore df: %d\t skb_len: %u,\t network_header: %u,\t transport_header: %u,\t encap: %-3u,\t inner_network_header: %u,\t inner_transport_header: %u,\t | gso_size: %-4u,\t gso_segs: %-4u,\t gso_type: 0x%02x,\t nr_frags: %u\t, frag_list: %d,  ip_summed: %llx, skb cb frag_max_size: %d, qdisc enqueue callback: %d, func: %s\n", $dev_name, $ignore_df, $len, $nh, $th, $encap, $inh, $ith, $gso_size, $gso_segs, $gso_type, $nr_frags, $frag_list, $ip_summed, $cb->frag_max_size, $enqueue, $func);
        //if ($ip_header->protocol == IPPROTO_UDP)
        //{

        //  //$udp_header = (struct udphdr *) $transport_header_offset;
        //  $udp_header = (struct udphdr *)($skb->head + $skb->transport_header);
        //  $up_src = (($udp_header->source & 0xff00) >> 8) | (($udp_header->source & 0x00ff) << 8);
        //  $up_dst = (($udp_header->dest & 0xff00) >> 8) | (($udp_header->dest & 0x00ff) << 8);

        //  // Print the collected data
        //  printf("####### udp header info: %s:%d => %s:%d\n", $sip, $up_src, $dip, $up_dst);
        //  printf("####### MAC src: %02x:%02x:%02x:%02x:%02x:%02x, MAC dst: %02x:%02x:%02x:%02x:%02x:%02x\n",
        //     $mac_header->h_source[0], $mac_header->h_source[1], $mac_header->h_source[2],
        //     $mac_header->h_source[3], $mac_header->h_source[4], $mac_header->h_source[5],
        //     $mac_header->h_dest[0], $mac_header->h_dest[1], $mac_header->h_dest[2],
        //     $mac_header->h_dest[3], $mac_header->h_dest[4], $mac_header->h_dest[5]);
        //}

        //if ($ip_header->protocol == IPPROTO_TCP)
        //{
        //  $tcp_header = (struct tcphdr *)($skb->head + $skb->transport_header);
        //  $tp_src = (($tcp_header->source & 0xff00) >> 8) | (($tcp_header->source & 0x00ff) << 8);
        //  $tp_dst = (($tcp_header->dest & 0xff00) >> 8) | (($tcp_header->dest & 0x00ff) << 8);

        //  // Print the collected data
        //  printf("####### tcp header info data: %s:%d => %s:%d\n", $sip, $tp_src, $dip, $tp_dst);
        //  printf("####### MAC src: %02x:%02x:%02x:%02x:%02x:%02x, MAC dst: %02x:%02x:%02x:%02x:%02x:%02x\n",
        //     $mac_header->h_source[0], $mac_header->h_source[1], $mac_header->h_source[2],
        //     $mac_header->h_source[3], $mac_header->h_source[4], $mac_header->h_source[5],
        //     $mac_header->h_dest[0], $mac_header->h_dest[1], $mac_header->h_dest[2],
        //     $mac_header->h_dest[3], $mac_header->h_dest[4], $mac_header->h_dest[5]);
        //}

        printf("netdev name: %s\n, kstack: %s", $dev_name, kstack);
        printf("end %s probe\n\n\n\n\n", $func);
    }
}

