#!/bin/bash
# calc_cpu_allocation.sh
#
# This script calculates and outputs:
# 1. The VMs in machine.slice that are configured with an exclusive CPU assignment.
#    The VMs are printed one-by-one (showing each vCPU and its CPU binding).
# 2. The CPUs in machine.slice that are NOT exclusively allocated to VMs.
#    These available CPUs are grouped by NUMA node and further grouped by
#    hyper-thread sibling groups.
#
# Assumptions:
# - machine.slice cpuset configuration is in /sys/fs/cgroup/cpuset/machine.slice/cpuset.cpus.
# - VMs are located in directories /sys/fs/cgroup/cpuset/machine.slice/machine-qemu*.
# - Each VM has one or more vcpu subdirectories containing a cpuset.cpus file.
# - The cpuset.mems is "0-1", so we are considering NUMA node 0 and node 1.
# - The system provides CPU topology info in /sys/devices/system/cpu/cpu{N}/topology/thread_siblings_list.

########################################
# Function to expand a cpuset string like "0,7,9,11-48,50-95"
# into a space-separated list of individual CPU numbers.
########################################
expand_cpuset() {
    local cpuset_str="$1"
    local result=()
    local IFS=","
    for item in $cpuset_str; do
        if [[ "$item" == *"-"* ]]; then
            IFS="-" read -r start end <<< "$item"
            for ((i=start; i<=end; i++)); do
                result+=("$i")
            done
        else
            result+=("$item")
        fi
    done
    echo "${result[@]}"
}

########################################
# 1. Read machine.slice allowed CPUs
########################################
machine_cpuset_file="/sys/fs/cgroup/cpuset/machine.slice/cpuset.cpus"
if [ ! -f "$machine_cpuset_file" ]; then
    echo "Error: Cannot read machine.slice cpuset cpus from $machine_cpuset_file"
    exit 1
fi
machine_cpus_str=$(cat "$machine_cpuset_file")
machine_cpus=($(expand_cpuset "$machine_cpus_str"))

########################################
# 2. Output VMs that have exclusive CPU assignments
########################################
declare -A exclusive_cpus
echo "配置了 CPU 独占的虚拟机及其 vCPU 对应的 CPU 核心："
echo "----------------------------------------------------------"

# Iterate over each VM directory (machine-qemu*)
for vm in /sys/fs/cgroup/cpuset/machine.slice/machine-qemu*; do
    if [ -d "$vm" ]; then
        vcpu0_file="$vm/vcpu0/cpuset.cpus"
        if [ -f "$vcpu0_file" ]; then
            vcpu0_cpuset=$(cat "$vcpu0_file")
            # If vcpu0's cpuset does not contain a comma, assume exclusive assignment.
            if [[ "$vcpu0_cpuset" != *","* ]]; then
                echo "虚拟机目录: $vm"
                # Iterate over all vcpu directories for this VM.
                for vcpu in "$vm"/vcpu*; do
                    if [ -f "$vcpu/cpuset.cpus" ]; then
                        cpus=$(cat "$vcpu/cpuset.cpus")
                        # Expand the cpuset string into individual CPU numbers.
                        cpu_list=($(expand_cpuset "$cpus"))
                        for cpu in "${cpu_list[@]}"; do
                            exclusive_cpus["$cpu"]=1
                        done
                        echo "  $(basename "$vcpu"): $cpus"
                    fi
                done
                echo ""
            fi
        fi
    fi
done

########################################
# 3. Determine available CPUs in machine.slice
#    (Those that are not exclusively allocated to any VM.)
########################################
available=()
for cpu in "${machine_cpus[@]}"; do
    if [[ -z "${exclusive_cpus[$cpu]}" ]]; then
        available+=("$cpu")
    fi
done

echo "------------------------------------------------------"
echo "machine.slice cpus: $machine_cpus_str"
echo "未被虚拟机独占的 CPU，按 NUMA 节点和超线程组划分："

########################################
# 4. Group the available CPUs by NUMA node and hyper-thread sibling groups
#    We assume there are two NUMA nodes (0 and 1), as configured by cpuset.mems="0-1".
########################################
for node in 0 1; do
    node_file="/sys/devices/system/node/node${node}/cpulist"
    if [ ! -f "$node_file" ]; then
        echo "NUMA node $node: 无 cpulist 文件"
        continue
    fi
    node_cpus_str=$(cat "$node_file")
    node_cpus=($(expand_cpuset "$node_cpus_str"))
    
    # Find the intersection between node_cpus and the available CPUs.
    node_available=()
    for ncpu in "${node_cpus[@]}"; do
        for acpu in "${available[@]}"; do
            if [ "$ncpu" -eq "$acpu" ]; then
                node_available+=("$acpu")
            fi
        done
    done

    if [ ${#node_available[@]} -eq 0 ]; then
        echo "NUMA node $node: 无可用 CPU"
        continue
    fi

    echo "NUMA node $node:"
    # Use an associative array to mark CPUs already grouped.
    declare -A ht_done=()
    for cpu in "${node_available[@]}"; do
        # Skip if already processed in a hyper-thread group.
        if [ -n "${ht_done[$cpu]}" ]; then
            continue
        fi
        ht_file="/sys/devices/system/cpu/cpu${cpu}/topology/thread_siblings_list"
        if [ -f "$ht_file" ]; then
            siblings=$(cat "$ht_file")
            sibling_list=($(expand_cpuset "$siblings"))
            # Find the intersection of the sibling list with node_available.
            group=()
            for sib in "${sibling_list[@]}"; do
                for avail in "${node_available[@]}"; do
                    if [ "$sib" -eq "$avail" ]; then
                        group+=("$sib")
                        ht_done["$sib"]=1
                    fi
                done
            done
            # Sort and output the hyper-thread group.
            IFS=$'\n' sorted_group=($(sort -n <<<"${group[*]}"))
            unset IFS
            echo "  cpu: ${sorted_group[*]}"
        else
            ht_done["$cpu"]=1
            echo "  cpu: $cpu"
        fi
    done
done

